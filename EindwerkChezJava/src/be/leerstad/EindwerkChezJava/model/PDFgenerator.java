package be.leerstad.EindwerkChezJava.model;

import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Collection;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
//import com.itextpdf.text.ZBadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
/**
 * aangepast van bestaande code thanks to the real author somewhere on the world wide web!
 * @author Wouter
 * @version 0.1 everything is visible on github https://github.com/wouterdhollander/CafeChezJava
 * @since 30/05/2016
 * @see <a href="https://github.com/wouterdhollander/CafeChezJava">GithubAccount</a>
 */
public class PDFgenerator {
	//private URL filename = CreatePDF.class.getResource("/lib/PDF.sql");
  //private String FILE;//= CreatePDF.class.getResource("/lib/PDF.sql").toString();
  private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
      Font.BOLD);
  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.NORMAL, BaseColor.RED);
  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
      Font.BOLD);
  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.BOLD,new BaseColor(BaseColor.BLUE.getRGB()));
  

  private String title;
  private String subTitle;
  private String author;
  private LocalDate date;
  private String fileLocation;
 private Document document = new Document();
   
  /**
 * @param fileName the filename of the pdf 
 * @param author the autor of the pdf
 * @throws DocumentException doc error
 * @throws FileNotFoundException file not found error
 */
public PDFgenerator(String fileName, String author) throws DocumentException, FileNotFoundException
  {
	  fileName = fileName.replaceAll("\\s+","");
	  this.title = fileName;
	  this.author = author;
	  this.date = LocalDate.now();
	  fileLocation = "./" + fileName + ".pdf";
	  
	 // File f = new File(fileLocation);
	  
	  FileOutputStream fileoutput = new FileOutputStream(fileLocation);
	  
      PdfWriter.getInstance(document,fileoutput );
      addMetaData();
      document.open();
  }
  
  
  /**
 * Show the pdf document
 */
public void Open()
  {
  if (Desktop.isDesktopSupported()) {
	    try {
	        File myFile = new File(fileLocation);
	        if (myFile.exists())
	        {
	        	Desktop.getDesktop().open(myFile);
	        }
	    } catch (IOException ex) {
	        // no application registered for PDFs
	    }
	}
  }
  /**
 * @return gets the location where the file is writtin to
 */
public String getFileLocation()
  {
	  return fileLocation;
  }

  /**
 * 
 */
public void Create()
  {
    try {
      document.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
  
  // iText allows to add metadata to the PDF which can be viewed in your Adobe
  // Reader
  // under File -> Properties
  private void addMetaData() {
    document.addTitle(title);
    document.addSubject("Overview cafeChezJava");
    document.addKeywords("Java, PDF, iText");
    document.addAuthor(author);
    document.addCreator(author);
    //document.addCreationDate() = true;
  }

  /**
 * @param titleName the title of the front page
 * @throws DocumentException docexeption
 */
public void addTitlePage(String titleName)
      throws DocumentException {
    Paragraph preface = new Paragraph();
    // We add one empty line
    addEmptyLine(preface, 1);
    // Lets write a big header
    preface.add(new Paragraph(titleName, catFont));

    addEmptyLine(preface, 1);
    // Will create: Report generated by: _name, _date
    preface.add(new Paragraph("Report generated by: " + author + ", " + date, //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        smallBold));
    addEmptyLine(preface, 3);
    preface.add(new Paragraph(subTitle,smallBold));

    addEmptyLine(preface, 8);

    document.add(preface);
    // Start a new page
    document.newPage();
  }

  /**
 * @param titleName the head title of this section list
 * @param list a collection object that will be printed in the pdf.
 * @throws DocumentException document exception
 */
public void addContent(String titleName, Collection<Order> list) throws DocumentException {
	  
    Anchor anchor = new Anchor("Overzicht", catFont);
    Chapter catPart = new Chapter(new Paragraph(anchor), 1);

	Paragraph subPara = new Paragraph("Orders of date" + list.iterator().next().getDate(), subFont);
	Section subCatPart = catPart.addSection(subPara);
	
	
	Paragraph preface = new Paragraph();
	addEmptyLine(preface, 4);
	 
	subCatPart.add(preface);
    //Section subCatPart2 = catPart.addSection(preface) ;
    createTable(subCatPart, list);
    document.add(catPart);
  }

  private void createTable(Section subCatPart, Collection<Order> orders)
      throws BadElementException {
    PdfPTable table = new PdfPTable(4);

    PdfPCell c1 = new PdfPCell(new Phrase("Ober"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    c1.setBorderWidth(2);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Aantal"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    c1.setBorderWidth(2);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("Drank"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    c1.setBorderWidth(2);
    table.addCell(c1);
    c1 = new PdfPCell(new Phrase("Totaal"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    c1.setBorderWidth(2);
    table.addCell(c1);
    table.setHeaderRows(1);

    for (Order order : orders) {
    	table.addCell(order.getOber().toString());
    	table.addCell(String.valueOf(order.getQuantity()));
    	table.addCell(order.getLiquid().toString());
    	table.addCell(String.valueOf(order.getPrice()));
	}
	table.addCell("");
	table.addCell("");
	c1 = new PdfPCell(new Phrase("totaal"));
	c1.setBackgroundColor(new BaseColor(BaseColor.RED.getRGB()));
	table.addCell(c1);
	OrderSet orderset = new OrderSet(orders);
	
	Phrase phrase = new Phrase(String.valueOf(orderset.calcutateOrders()));

	c1 = new PdfPCell(phrase);
	c1.setBackgroundColor(new BaseColor(BaseColor.RED.getRGB()));
	table.addCell(c1);
    subCatPart.add(table);

  }

  private void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
  }

} 